// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database_sql

import (
	"context"
	"database/sql"
	"time"
)

const isRevoked = `-- name: IsRevoked :one
;

SELECT is_revoked FROM tokens
WHERE jti = ?
`

func (q *Queries) IsRevoked(ctx context.Context, jti string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, isRevoked, jti)
	var is_revoked sql.NullBool
	err := row.Scan(&is_revoked)
	return is_revoked, err
}

const revokeToken = `-- name: RevokeToken :one
UPDATE tokens 
SET is_revoked  = 1
WHERE jti = ?
RETURNING jti, user_id, expires_at, is_revoked
`

func (q *Queries) RevokeToken(ctx context.Context, jti string) (Token, error) {
	row := q.db.QueryRowContext(ctx, revokeToken, jti)
	var i Token
	err := row.Scan(
		&i.Jti,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsRevoked,
	)
	return i, err
}

const storeToken = `-- name: StoreToken :one
INSERT INTO tokens (
    user_id,jti,expires_at
) VALUES ( ?,?,?)
RETURNING jti, user_id, expires_at, is_revoked
`

type StoreTokenParams struct {
	UserID    int64
	Jti       string
	ExpiresAt time.Time
}

func (q *Queries) StoreToken(ctx context.Context, arg StoreTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, storeToken, arg.UserID, arg.Jti, arg.ExpiresAt)
	var i Token
	err := row.Scan(
		&i.Jti,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsRevoked,
	)
	return i, err
}
